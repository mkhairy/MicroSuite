// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_router_2eproto_metadata_getter(int index);
namespace router {
class LookupResponse;
struct LookupResponseDefaultTypeInternal;
extern LookupResponseDefaultTypeInternal _LookupResponse_default_instance_;
class RouterRequest;
struct RouterRequestDefaultTypeInternal;
extern RouterRequestDefaultTypeInternal _RouterRequest_default_instance_;
class Util;
struct UtilDefaultTypeInternal;
extern UtilDefaultTypeInternal _Util_default_instance_;
class UtilRequest;
struct UtilRequestDefaultTypeInternal;
extern UtilRequestDefaultTypeInternal _UtilRequest_default_instance_;
class UtilResponse;
struct UtilResponseDefaultTypeInternal;
extern UtilResponseDefaultTypeInternal _UtilResponse_default_instance_;
}  // namespace router
PROTOBUF_NAMESPACE_OPEN
template<> ::router::LookupResponse* Arena::CreateMaybeMessage<::router::LookupResponse>(Arena*);
template<> ::router::RouterRequest* Arena::CreateMaybeMessage<::router::RouterRequest>(Arena*);
template<> ::router::Util* Arena::CreateMaybeMessage<::router::Util>(Arena*);
template<> ::router::UtilRequest* Arena::CreateMaybeMessage<::router::UtilRequest>(Arena*);
template<> ::router::UtilResponse* Arena::CreateMaybeMessage<::router::UtilResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace router {

// ===================================================================

class UtilRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.UtilRequest) */ {
 public:
  inline UtilRequest() : UtilRequest(nullptr) {}
  virtual ~UtilRequest();
  explicit constexpr UtilRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtilRequest(const UtilRequest& from);
  UtilRequest(UtilRequest&& from) noexcept
    : UtilRequest() {
    *this = ::std::move(from);
  }

  inline UtilRequest& operator=(const UtilRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtilRequest& operator=(UtilRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UtilRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtilRequest* internal_default_instance() {
    return reinterpret_cast<const UtilRequest*>(
               &_UtilRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UtilRequest& a, UtilRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UtilRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtilRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtilRequest* New() const final {
    return CreateMaybeMessage<UtilRequest>(nullptr);
  }

  UtilRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtilRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UtilRequest& from);
  void MergeFrom(const UtilRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtilRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.UtilRequest";
  }
  protected:
  explicit UtilRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_router_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtilRequestFieldNumber = 1,
  };
  // bool util_request = 1;
  void clear_util_request();
  bool util_request() const;
  void set_util_request(bool value);
  private:
  bool _internal_util_request() const;
  void _internal_set_util_request(bool value);
  public:

  // @@protoc_insertion_point(class_scope:router.UtilRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool util_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.RouterRequest) */ {
 public:
  inline RouterRequest() : RouterRequest(nullptr) {}
  virtual ~RouterRequest();
  explicit constexpr RouterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouterRequest(const RouterRequest& from);
  RouterRequest(RouterRequest&& from) noexcept
    : RouterRequest() {
    *this = ::std::move(from);
  }

  inline RouterRequest& operator=(const RouterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouterRequest& operator=(RouterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouterRequest* internal_default_instance() {
    return reinterpret_cast<const RouterRequest*>(
               &_RouterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RouterRequest& a, RouterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RouterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouterRequest* New() const final {
    return CreateMaybeMessage<RouterRequest>(nullptr);
  }

  RouterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouterRequest& from);
  void MergeFrom(const RouterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.RouterRequest";
  }
  protected:
  explicit RouterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_router_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kUtilRequestFieldNumber = 4,
    kOperationFieldNumber = 3,
    kLastRequestFieldNumber = 5,
    kKillFieldNumber = 7,
    kRespTimeFieldNumber = 6,
    kRequestIdFieldNumber = 8,
    kLoadFieldNumber = 9,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .router.UtilRequest util_request = 4;
  bool has_util_request() const;
  private:
  bool _internal_has_util_request() const;
  public:
  void clear_util_request();
  const ::router::UtilRequest& util_request() const;
  ::router::UtilRequest* release_util_request();
  ::router::UtilRequest* mutable_util_request();
  void set_allocated_util_request(::router::UtilRequest* util_request);
  private:
  const ::router::UtilRequest& _internal_util_request() const;
  ::router::UtilRequest* _internal_mutable_util_request();
  public:
  void unsafe_arena_set_allocated_util_request(
      ::router::UtilRequest* util_request);
  ::router::UtilRequest* unsafe_arena_release_util_request();

  // uint32 operation = 3;
  void clear_operation();
  ::PROTOBUF_NAMESPACE_ID::uint32 operation() const;
  void set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operation() const;
  void _internal_set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool last_request = 5;
  void clear_last_request();
  bool last_request() const;
  void set_last_request(bool value);
  private:
  bool _internal_last_request() const;
  void _internal_set_last_request(bool value);
  public:

  // bool kill = 7;
  void clear_kill();
  bool kill() const;
  void set_kill(bool value);
  private:
  bool _internal_kill() const;
  void _internal_set_kill(bool value);
  public:

  // uint64 resp_time = 6;
  void clear_resp_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 resp_time() const;
  void set_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_resp_time() const;
  void _internal_set_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 request_id = 8;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 load = 9;
  void clear_load();
  ::PROTOBUF_NAMESPACE_ID::uint32 load() const;
  void set_load(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_load() const;
  void _internal_set_load(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:router.RouterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::router::UtilRequest* util_request_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operation_;
  bool last_request_;
  bool kill_;
  ::PROTOBUF_NAMESPACE_ID::uint64 resp_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 load_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class Util PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.Util) */ {
 public:
  inline Util() : Util(nullptr) {}
  virtual ~Util();
  explicit constexpr Util(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Util(const Util& from);
  Util(Util&& from) noexcept
    : Util() {
    *this = ::std::move(from);
  }

  inline Util& operator=(const Util& from) {
    CopyFrom(from);
    return *this;
  }
  inline Util& operator=(Util&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Util& default_instance() {
    return *internal_default_instance();
  }
  static inline const Util* internal_default_instance() {
    return reinterpret_cast<const Util*>(
               &_Util_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Util& a, Util& b) {
    a.Swap(&b);
  }
  inline void Swap(Util* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Util* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Util* New() const final {
    return CreateMaybeMessage<Util>(nullptr);
  }

  Util* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Util>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Util& from);
  void MergeFrom(const Util& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Util* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.Util";
  }
  protected:
  explicit Util(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_router_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserTimeFieldNumber = 1,
    kSystemTimeFieldNumber = 2,
    kIoTimeFieldNumber = 3,
    kIdleTimeFieldNumber = 4,
  };
  // uint64 user_time = 1;
  void clear_user_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_time() const;
  void set_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_time() const;
  void _internal_set_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 system_time = 2;
  void clear_system_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 system_time() const;
  void set_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_system_time() const;
  void _internal_set_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 io_time = 3;
  void clear_io_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 io_time() const;
  void set_io_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_io_time() const;
  void _internal_set_io_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 idle_time = 4;
  void clear_idle_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 idle_time() const;
  void set_idle_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_idle_time() const;
  void _internal_set_idle_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:router.Util)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 system_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 io_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 idle_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class UtilResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.UtilResponse) */ {
 public:
  inline UtilResponse() : UtilResponse(nullptr) {}
  virtual ~UtilResponse();
  explicit constexpr UtilResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UtilResponse(const UtilResponse& from);
  UtilResponse(UtilResponse&& from) noexcept
    : UtilResponse() {
    *this = ::std::move(from);
  }

  inline UtilResponse& operator=(const UtilResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtilResponse& operator=(UtilResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UtilResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UtilResponse* internal_default_instance() {
    return reinterpret_cast<const UtilResponse*>(
               &_UtilResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UtilResponse& a, UtilResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UtilResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UtilResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtilResponse* New() const final {
    return CreateMaybeMessage<UtilResponse>(nullptr);
  }

  UtilResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtilResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UtilResponse& from);
  void MergeFrom(const UtilResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtilResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.UtilResponse";
  }
  protected:
  explicit UtilResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_router_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLookupSrvUtilFieldNumber = 2,
    kRouterUtilFieldNumber = 3,
    kUtilPresentFieldNumber = 1,
  };
  // repeated .router.Util lookup_srv_util = 2;
  int lookup_srv_util_size() const;
  private:
  int _internal_lookup_srv_util_size() const;
  public:
  void clear_lookup_srv_util();
  ::router::Util* mutable_lookup_srv_util(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Util >*
      mutable_lookup_srv_util();
  private:
  const ::router::Util& _internal_lookup_srv_util(int index) const;
  ::router::Util* _internal_add_lookup_srv_util();
  public:
  const ::router::Util& lookup_srv_util(int index) const;
  ::router::Util* add_lookup_srv_util();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Util >&
      lookup_srv_util() const;

  // .router.Util router_util = 3;
  bool has_router_util() const;
  private:
  bool _internal_has_router_util() const;
  public:
  void clear_router_util();
  const ::router::Util& router_util() const;
  ::router::Util* release_router_util();
  ::router::Util* mutable_router_util();
  void set_allocated_router_util(::router::Util* router_util);
  private:
  const ::router::Util& _internal_router_util() const;
  ::router::Util* _internal_mutable_router_util();
  public:
  void unsafe_arena_set_allocated_router_util(
      ::router::Util* router_util);
  ::router::Util* unsafe_arena_release_router_util();

  // bool util_present = 1;
  void clear_util_present();
  bool util_present() const;
  void set_util_present(bool value);
  private:
  bool _internal_util_present() const;
  void _internal_set_util_present(bool value);
  public:

  // @@protoc_insertion_point(class_scope:router.UtilResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Util > lookup_srv_util_;
  ::router::Util* router_util_;
  bool util_present_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class LookupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router.LookupResponse) */ {
 public:
  inline LookupResponse() : LookupResponse(nullptr) {}
  virtual ~LookupResponse();
  explicit constexpr LookupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupResponse(const LookupResponse& from);
  LookupResponse(LookupResponse&& from) noexcept
    : LookupResponse() {
    *this = ::std::move(from);
  }

  inline LookupResponse& operator=(const LookupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupResponse& operator=(LookupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LookupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupResponse* internal_default_instance() {
    return reinterpret_cast<const LookupResponse*>(
               &_LookupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LookupResponse& a, LookupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LookupResponse* New() const final {
    return CreateMaybeMessage<LookupResponse>(nullptr);
  }

  LookupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LookupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LookupResponse& from);
  void MergeFrom(const LookupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router.LookupResponse";
  }
  protected:
  explicit LookupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_router_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 23,
    kUtilResponseFieldNumber = 13,
    kCreateRouterReqTimeFieldNumber = 1,
    kUnpackRouterReqTimeFieldNumber = 2,
    kUpdateRouterUtilTimeFieldNumber = 3,
    kGetLookupSrvResponsesTimeFieldNumber = 5,
    kCreateLookupSrvReqTimeFieldNumber = 6,
    kUnpackLookupSrvRespTimeFieldNumber = 7,
    kUnpackLookupSrvReqTimeFieldNumber = 8,
    kLookupSrvTimeFieldNumber = 9,
    kPackLookupSrvRespTimeFieldNumber = 10,
    kPackRouterRespTimeFieldNumber = 11,
    kRespTimeFieldNumber = 14,
    kRouterTimeFieldNumber = 15,
    kStartStampFieldNumber = 16,
    kEndStampFieldNumber = 17,
    kNumberOfLookupServersFieldNumber = 12,
    kKillAckFieldNumber = 22,
    kRequestIdFieldNumber = 18,
    kNumInlineFieldNumber = 19,
    kNumWorkersFieldNumber = 20,
    kNumRespFieldNumber = 21,
    kMergeTimeFieldNumber = 24,
  };
  // string value = 23;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .router.UtilResponse util_response = 13;
  bool has_util_response() const;
  private:
  bool _internal_has_util_response() const;
  public:
  void clear_util_response();
  const ::router::UtilResponse& util_response() const;
  ::router::UtilResponse* release_util_response();
  ::router::UtilResponse* mutable_util_response();
  void set_allocated_util_response(::router::UtilResponse* util_response);
  private:
  const ::router::UtilResponse& _internal_util_response() const;
  ::router::UtilResponse* _internal_mutable_util_response();
  public:
  void unsafe_arena_set_allocated_util_response(
      ::router::UtilResponse* util_response);
  ::router::UtilResponse* unsafe_arena_release_util_response();

  // uint64 create_router_req_time = 1;
  void clear_create_router_req_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 create_router_req_time() const;
  void set_create_router_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_create_router_req_time() const;
  void _internal_set_create_router_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 unpack_router_req_time = 2;
  void clear_unpack_router_req_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 unpack_router_req_time() const;
  void set_unpack_router_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unpack_router_req_time() const;
  void _internal_set_unpack_router_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 update_router_util_time = 3;
  void clear_update_router_util_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 update_router_util_time() const;
  void set_update_router_util_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_update_router_util_time() const;
  void _internal_set_update_router_util_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 get_lookup_srv_responses_time = 5;
  void clear_get_lookup_srv_responses_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 get_lookup_srv_responses_time() const;
  void set_get_lookup_srv_responses_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_get_lookup_srv_responses_time() const;
  void _internal_set_get_lookup_srv_responses_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 create_lookup_srv_req_time = 6;
  void clear_create_lookup_srv_req_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 create_lookup_srv_req_time() const;
  void set_create_lookup_srv_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_create_lookup_srv_req_time() const;
  void _internal_set_create_lookup_srv_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 unpack_lookup_srv_resp_time = 7;
  void clear_unpack_lookup_srv_resp_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 unpack_lookup_srv_resp_time() const;
  void set_unpack_lookup_srv_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unpack_lookup_srv_resp_time() const;
  void _internal_set_unpack_lookup_srv_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 unpack_lookup_srv_req_time = 8;
  void clear_unpack_lookup_srv_req_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 unpack_lookup_srv_req_time() const;
  void set_unpack_lookup_srv_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unpack_lookup_srv_req_time() const;
  void _internal_set_unpack_lookup_srv_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lookup_srv_time = 9;
  void clear_lookup_srv_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 lookup_srv_time() const;
  void set_lookup_srv_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lookup_srv_time() const;
  void _internal_set_lookup_srv_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pack_lookup_srv_resp_time = 10;
  void clear_pack_lookup_srv_resp_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_lookup_srv_resp_time() const;
  void set_pack_lookup_srv_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_lookup_srv_resp_time() const;
  void _internal_set_pack_lookup_srv_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pack_router_resp_time = 11;
  void clear_pack_router_resp_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_router_resp_time() const;
  void set_pack_router_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_router_resp_time() const;
  void _internal_set_pack_router_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 resp_time = 14;
  void clear_resp_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 resp_time() const;
  void set_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_resp_time() const;
  void _internal_set_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 router_time = 15;
  void clear_router_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 router_time() const;
  void set_router_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_router_time() const;
  void _internal_set_router_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 start_stamp = 16;
  void clear_start_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_stamp() const;
  void set_start_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_stamp() const;
  void _internal_set_start_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_stamp = 17;
  void clear_end_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_stamp() const;
  void set_end_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_stamp() const;
  void _internal_set_end_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 number_of_lookup_servers = 12;
  void clear_number_of_lookup_servers();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_lookup_servers() const;
  void set_number_of_lookup_servers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_lookup_servers() const;
  void _internal_set_number_of_lookup_servers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool kill_ack = 22;
  void clear_kill_ack();
  bool kill_ack() const;
  void set_kill_ack(bool value);
  private:
  bool _internal_kill_ack() const;
  void _internal_set_kill_ack(bool value);
  public:

  // uint64 request_id = 18;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_inline = 19;
  void clear_num_inline();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_inline() const;
  void set_num_inline(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_inline() const;
  void _internal_set_num_inline(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_workers = 20;
  void clear_num_workers();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_workers() const;
  void set_num_workers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_workers() const;
  void _internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_resp = 21;
  void clear_num_resp();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_resp() const;
  void set_num_resp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_resp() const;
  void _internal_set_num_resp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 merge_time = 24;
  void clear_merge_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 merge_time() const;
  void set_merge_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_merge_time() const;
  void _internal_set_merge_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:router.LookupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::router::UtilResponse* util_response_;
  ::PROTOBUF_NAMESPACE_ID::uint64 create_router_req_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unpack_router_req_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 update_router_util_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 get_lookup_srv_responses_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 create_lookup_srv_req_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unpack_lookup_srv_resp_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unpack_lookup_srv_req_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lookup_srv_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_lookup_srv_resp_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_router_resp_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 resp_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 router_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_lookup_servers_;
  bool kill_ack_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_inline_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_workers_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_resp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 merge_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UtilRequest

// bool util_request = 1;
inline void UtilRequest::clear_util_request() {
  util_request_ = false;
}
inline bool UtilRequest::_internal_util_request() const {
  return util_request_;
}
inline bool UtilRequest::util_request() const {
  // @@protoc_insertion_point(field_get:router.UtilRequest.util_request)
  return _internal_util_request();
}
inline void UtilRequest::_internal_set_util_request(bool value) {
  
  util_request_ = value;
}
inline void UtilRequest::set_util_request(bool value) {
  _internal_set_util_request(value);
  // @@protoc_insertion_point(field_set:router.UtilRequest.util_request)
}

// -------------------------------------------------------------------

// RouterRequest

// string key = 1;
inline void RouterRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& RouterRequest::key() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.key)
  return _internal_key();
}
inline void RouterRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.key)
}
inline std::string* RouterRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:router.RouterRequest.key)
  return _internal_mutable_key();
}
inline const std::string& RouterRequest::_internal_key() const {
  return key_.Get();
}
inline void RouterRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RouterRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:router.RouterRequest.key)
}
inline void RouterRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:router.RouterRequest.key)
}
inline void RouterRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:router.RouterRequest.key)
}
inline std::string* RouterRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RouterRequest::release_key() {
  // @@protoc_insertion_point(field_release:router.RouterRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RouterRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:router.RouterRequest.key)
}

// string value = 2;
inline void RouterRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& RouterRequest::value() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.value)
  return _internal_value();
}
inline void RouterRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.value)
}
inline std::string* RouterRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:router.RouterRequest.value)
  return _internal_mutable_value();
}
inline const std::string& RouterRequest::_internal_value() const {
  return value_.Get();
}
inline void RouterRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RouterRequest::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:router.RouterRequest.value)
}
inline void RouterRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:router.RouterRequest.value)
}
inline void RouterRequest::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:router.RouterRequest.value)
}
inline std::string* RouterRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RouterRequest::release_value() {
  // @@protoc_insertion_point(field_release:router.RouterRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RouterRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:router.RouterRequest.value)
}

// uint32 operation = 3;
inline void RouterRequest::clear_operation() {
  operation_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouterRequest::_internal_operation() const {
  return operation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouterRequest::operation() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.operation)
  return _internal_operation();
}
inline void RouterRequest::_internal_set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  operation_ = value;
}
inline void RouterRequest::set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.operation)
}

// .router.UtilRequest util_request = 4;
inline bool RouterRequest::_internal_has_util_request() const {
  return this != internal_default_instance() && util_request_ != nullptr;
}
inline bool RouterRequest::has_util_request() const {
  return _internal_has_util_request();
}
inline void RouterRequest::clear_util_request() {
  if (GetArena() == nullptr && util_request_ != nullptr) {
    delete util_request_;
  }
  util_request_ = nullptr;
}
inline const ::router::UtilRequest& RouterRequest::_internal_util_request() const {
  const ::router::UtilRequest* p = util_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::UtilRequest&>(
      ::router::_UtilRequest_default_instance_);
}
inline const ::router::UtilRequest& RouterRequest::util_request() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.util_request)
  return _internal_util_request();
}
inline void RouterRequest::unsafe_arena_set_allocated_util_request(
    ::router::UtilRequest* util_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(util_request_);
  }
  util_request_ = util_request;
  if (util_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router.RouterRequest.util_request)
}
inline ::router::UtilRequest* RouterRequest::release_util_request() {
  
  ::router::UtilRequest* temp = util_request_;
  util_request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::router::UtilRequest* RouterRequest::unsafe_arena_release_util_request() {
  // @@protoc_insertion_point(field_release:router.RouterRequest.util_request)
  
  ::router::UtilRequest* temp = util_request_;
  util_request_ = nullptr;
  return temp;
}
inline ::router::UtilRequest* RouterRequest::_internal_mutable_util_request() {
  
  if (util_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::UtilRequest>(GetArena());
    util_request_ = p;
  }
  return util_request_;
}
inline ::router::UtilRequest* RouterRequest::mutable_util_request() {
  // @@protoc_insertion_point(field_mutable:router.RouterRequest.util_request)
  return _internal_mutable_util_request();
}
inline void RouterRequest::set_allocated_util_request(::router::UtilRequest* util_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete util_request_;
  }
  if (util_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(util_request);
    if (message_arena != submessage_arena) {
      util_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, util_request, submessage_arena);
    }
    
  } else {
    
  }
  util_request_ = util_request;
  // @@protoc_insertion_point(field_set_allocated:router.RouterRequest.util_request)
}

// bool last_request = 5;
inline void RouterRequest::clear_last_request() {
  last_request_ = false;
}
inline bool RouterRequest::_internal_last_request() const {
  return last_request_;
}
inline bool RouterRequest::last_request() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.last_request)
  return _internal_last_request();
}
inline void RouterRequest::_internal_set_last_request(bool value) {
  
  last_request_ = value;
}
inline void RouterRequest::set_last_request(bool value) {
  _internal_set_last_request(value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.last_request)
}

// uint64 resp_time = 6;
inline void RouterRequest::clear_resp_time() {
  resp_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RouterRequest::_internal_resp_time() const {
  return resp_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RouterRequest::resp_time() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.resp_time)
  return _internal_resp_time();
}
inline void RouterRequest::_internal_set_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  resp_time_ = value;
}
inline void RouterRequest::set_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_resp_time(value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.resp_time)
}

// bool kill = 7;
inline void RouterRequest::clear_kill() {
  kill_ = false;
}
inline bool RouterRequest::_internal_kill() const {
  return kill_;
}
inline bool RouterRequest::kill() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.kill)
  return _internal_kill();
}
inline void RouterRequest::_internal_set_kill(bool value) {
  
  kill_ = value;
}
inline void RouterRequest::set_kill(bool value) {
  _internal_set_kill(value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.kill)
}

// uint64 request_id = 8;
inline void RouterRequest::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RouterRequest::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RouterRequest::request_id() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.request_id)
  return _internal_request_id();
}
inline void RouterRequest::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void RouterRequest::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.request_id)
}

// uint32 load = 9;
inline void RouterRequest::clear_load() {
  load_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouterRequest::_internal_load() const {
  return load_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouterRequest::load() const {
  // @@protoc_insertion_point(field_get:router.RouterRequest.load)
  return _internal_load();
}
inline void RouterRequest::_internal_set_load(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  load_ = value;
}
inline void RouterRequest::set_load(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_load(value);
  // @@protoc_insertion_point(field_set:router.RouterRequest.load)
}

// -------------------------------------------------------------------

// Util

// uint64 user_time = 1;
inline void Util::clear_user_time() {
  user_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Util::_internal_user_time() const {
  return user_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Util::user_time() const {
  // @@protoc_insertion_point(field_get:router.Util.user_time)
  return _internal_user_time();
}
inline void Util::_internal_set_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_time_ = value;
}
inline void Util::set_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_time(value);
  // @@protoc_insertion_point(field_set:router.Util.user_time)
}

// uint64 system_time = 2;
inline void Util::clear_system_time() {
  system_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Util::_internal_system_time() const {
  return system_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Util::system_time() const {
  // @@protoc_insertion_point(field_get:router.Util.system_time)
  return _internal_system_time();
}
inline void Util::_internal_set_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  system_time_ = value;
}
inline void Util::set_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_system_time(value);
  // @@protoc_insertion_point(field_set:router.Util.system_time)
}

// uint64 io_time = 3;
inline void Util::clear_io_time() {
  io_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Util::_internal_io_time() const {
  return io_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Util::io_time() const {
  // @@protoc_insertion_point(field_get:router.Util.io_time)
  return _internal_io_time();
}
inline void Util::_internal_set_io_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  io_time_ = value;
}
inline void Util::set_io_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_io_time(value);
  // @@protoc_insertion_point(field_set:router.Util.io_time)
}

// uint64 idle_time = 4;
inline void Util::clear_idle_time() {
  idle_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Util::_internal_idle_time() const {
  return idle_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Util::idle_time() const {
  // @@protoc_insertion_point(field_get:router.Util.idle_time)
  return _internal_idle_time();
}
inline void Util::_internal_set_idle_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  idle_time_ = value;
}
inline void Util::set_idle_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_idle_time(value);
  // @@protoc_insertion_point(field_set:router.Util.idle_time)
}

// -------------------------------------------------------------------

// UtilResponse

// bool util_present = 1;
inline void UtilResponse::clear_util_present() {
  util_present_ = false;
}
inline bool UtilResponse::_internal_util_present() const {
  return util_present_;
}
inline bool UtilResponse::util_present() const {
  // @@protoc_insertion_point(field_get:router.UtilResponse.util_present)
  return _internal_util_present();
}
inline void UtilResponse::_internal_set_util_present(bool value) {
  
  util_present_ = value;
}
inline void UtilResponse::set_util_present(bool value) {
  _internal_set_util_present(value);
  // @@protoc_insertion_point(field_set:router.UtilResponse.util_present)
}

// repeated .router.Util lookup_srv_util = 2;
inline int UtilResponse::_internal_lookup_srv_util_size() const {
  return lookup_srv_util_.size();
}
inline int UtilResponse::lookup_srv_util_size() const {
  return _internal_lookup_srv_util_size();
}
inline void UtilResponse::clear_lookup_srv_util() {
  lookup_srv_util_.Clear();
}
inline ::router::Util* UtilResponse::mutable_lookup_srv_util(int index) {
  // @@protoc_insertion_point(field_mutable:router.UtilResponse.lookup_srv_util)
  return lookup_srv_util_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Util >*
UtilResponse::mutable_lookup_srv_util() {
  // @@protoc_insertion_point(field_mutable_list:router.UtilResponse.lookup_srv_util)
  return &lookup_srv_util_;
}
inline const ::router::Util& UtilResponse::_internal_lookup_srv_util(int index) const {
  return lookup_srv_util_.Get(index);
}
inline const ::router::Util& UtilResponse::lookup_srv_util(int index) const {
  // @@protoc_insertion_point(field_get:router.UtilResponse.lookup_srv_util)
  return _internal_lookup_srv_util(index);
}
inline ::router::Util* UtilResponse::_internal_add_lookup_srv_util() {
  return lookup_srv_util_.Add();
}
inline ::router::Util* UtilResponse::add_lookup_srv_util() {
  // @@protoc_insertion_point(field_add:router.UtilResponse.lookup_srv_util)
  return _internal_add_lookup_srv_util();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router::Util >&
UtilResponse::lookup_srv_util() const {
  // @@protoc_insertion_point(field_list:router.UtilResponse.lookup_srv_util)
  return lookup_srv_util_;
}

// .router.Util router_util = 3;
inline bool UtilResponse::_internal_has_router_util() const {
  return this != internal_default_instance() && router_util_ != nullptr;
}
inline bool UtilResponse::has_router_util() const {
  return _internal_has_router_util();
}
inline void UtilResponse::clear_router_util() {
  if (GetArena() == nullptr && router_util_ != nullptr) {
    delete router_util_;
  }
  router_util_ = nullptr;
}
inline const ::router::Util& UtilResponse::_internal_router_util() const {
  const ::router::Util* p = router_util_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::Util&>(
      ::router::_Util_default_instance_);
}
inline const ::router::Util& UtilResponse::router_util() const {
  // @@protoc_insertion_point(field_get:router.UtilResponse.router_util)
  return _internal_router_util();
}
inline void UtilResponse::unsafe_arena_set_allocated_router_util(
    ::router::Util* router_util) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_util_);
  }
  router_util_ = router_util;
  if (router_util) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router.UtilResponse.router_util)
}
inline ::router::Util* UtilResponse::release_router_util() {
  
  ::router::Util* temp = router_util_;
  router_util_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::router::Util* UtilResponse::unsafe_arena_release_router_util() {
  // @@protoc_insertion_point(field_release:router.UtilResponse.router_util)
  
  ::router::Util* temp = router_util_;
  router_util_ = nullptr;
  return temp;
}
inline ::router::Util* UtilResponse::_internal_mutable_router_util() {
  
  if (router_util_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::Util>(GetArena());
    router_util_ = p;
  }
  return router_util_;
}
inline ::router::Util* UtilResponse::mutable_router_util() {
  // @@protoc_insertion_point(field_mutable:router.UtilResponse.router_util)
  return _internal_mutable_router_util();
}
inline void UtilResponse::set_allocated_router_util(::router::Util* router_util) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete router_util_;
  }
  if (router_util) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(router_util);
    if (message_arena != submessage_arena) {
      router_util = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_util, submessage_arena);
    }
    
  } else {
    
  }
  router_util_ = router_util;
  // @@protoc_insertion_point(field_set_allocated:router.UtilResponse.router_util)
}

// -------------------------------------------------------------------

// LookupResponse

// uint64 create_router_req_time = 1;
inline void LookupResponse::clear_create_router_req_time() {
  create_router_req_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_create_router_req_time() const {
  return create_router_req_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::create_router_req_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.create_router_req_time)
  return _internal_create_router_req_time();
}
inline void LookupResponse::_internal_set_create_router_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  create_router_req_time_ = value;
}
inline void LookupResponse::set_create_router_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_create_router_req_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.create_router_req_time)
}

// uint64 unpack_router_req_time = 2;
inline void LookupResponse::clear_unpack_router_req_time() {
  unpack_router_req_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_unpack_router_req_time() const {
  return unpack_router_req_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::unpack_router_req_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.unpack_router_req_time)
  return _internal_unpack_router_req_time();
}
inline void LookupResponse::_internal_set_unpack_router_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  unpack_router_req_time_ = value;
}
inline void LookupResponse::set_unpack_router_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unpack_router_req_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.unpack_router_req_time)
}

// uint64 update_router_util_time = 3;
inline void LookupResponse::clear_update_router_util_time() {
  update_router_util_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_update_router_util_time() const {
  return update_router_util_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::update_router_util_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.update_router_util_time)
  return _internal_update_router_util_time();
}
inline void LookupResponse::_internal_set_update_router_util_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  update_router_util_time_ = value;
}
inline void LookupResponse::set_update_router_util_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_update_router_util_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.update_router_util_time)
}

// uint64 get_lookup_srv_responses_time = 5;
inline void LookupResponse::clear_get_lookup_srv_responses_time() {
  get_lookup_srv_responses_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_get_lookup_srv_responses_time() const {
  return get_lookup_srv_responses_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::get_lookup_srv_responses_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.get_lookup_srv_responses_time)
  return _internal_get_lookup_srv_responses_time();
}
inline void LookupResponse::_internal_set_get_lookup_srv_responses_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  get_lookup_srv_responses_time_ = value;
}
inline void LookupResponse::set_get_lookup_srv_responses_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_get_lookup_srv_responses_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.get_lookup_srv_responses_time)
}

// uint64 create_lookup_srv_req_time = 6;
inline void LookupResponse::clear_create_lookup_srv_req_time() {
  create_lookup_srv_req_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_create_lookup_srv_req_time() const {
  return create_lookup_srv_req_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::create_lookup_srv_req_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.create_lookup_srv_req_time)
  return _internal_create_lookup_srv_req_time();
}
inline void LookupResponse::_internal_set_create_lookup_srv_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  create_lookup_srv_req_time_ = value;
}
inline void LookupResponse::set_create_lookup_srv_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_create_lookup_srv_req_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.create_lookup_srv_req_time)
}

// uint64 unpack_lookup_srv_resp_time = 7;
inline void LookupResponse::clear_unpack_lookup_srv_resp_time() {
  unpack_lookup_srv_resp_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_unpack_lookup_srv_resp_time() const {
  return unpack_lookup_srv_resp_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::unpack_lookup_srv_resp_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.unpack_lookup_srv_resp_time)
  return _internal_unpack_lookup_srv_resp_time();
}
inline void LookupResponse::_internal_set_unpack_lookup_srv_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  unpack_lookup_srv_resp_time_ = value;
}
inline void LookupResponse::set_unpack_lookup_srv_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unpack_lookup_srv_resp_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.unpack_lookup_srv_resp_time)
}

// uint64 unpack_lookup_srv_req_time = 8;
inline void LookupResponse::clear_unpack_lookup_srv_req_time() {
  unpack_lookup_srv_req_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_unpack_lookup_srv_req_time() const {
  return unpack_lookup_srv_req_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::unpack_lookup_srv_req_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.unpack_lookup_srv_req_time)
  return _internal_unpack_lookup_srv_req_time();
}
inline void LookupResponse::_internal_set_unpack_lookup_srv_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  unpack_lookup_srv_req_time_ = value;
}
inline void LookupResponse::set_unpack_lookup_srv_req_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unpack_lookup_srv_req_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.unpack_lookup_srv_req_time)
}

// uint64 lookup_srv_time = 9;
inline void LookupResponse::clear_lookup_srv_time() {
  lookup_srv_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_lookup_srv_time() const {
  return lookup_srv_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::lookup_srv_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.lookup_srv_time)
  return _internal_lookup_srv_time();
}
inline void LookupResponse::_internal_set_lookup_srv_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lookup_srv_time_ = value;
}
inline void LookupResponse::set_lookup_srv_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lookup_srv_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.lookup_srv_time)
}

// uint64 pack_lookup_srv_resp_time = 10;
inline void LookupResponse::clear_pack_lookup_srv_resp_time() {
  pack_lookup_srv_resp_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_pack_lookup_srv_resp_time() const {
  return pack_lookup_srv_resp_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::pack_lookup_srv_resp_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.pack_lookup_srv_resp_time)
  return _internal_pack_lookup_srv_resp_time();
}
inline void LookupResponse::_internal_set_pack_lookup_srv_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_lookup_srv_resp_time_ = value;
}
inline void LookupResponse::set_pack_lookup_srv_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_lookup_srv_resp_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.pack_lookup_srv_resp_time)
}

// uint64 pack_router_resp_time = 11;
inline void LookupResponse::clear_pack_router_resp_time() {
  pack_router_resp_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_pack_router_resp_time() const {
  return pack_router_resp_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::pack_router_resp_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.pack_router_resp_time)
  return _internal_pack_router_resp_time();
}
inline void LookupResponse::_internal_set_pack_router_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_router_resp_time_ = value;
}
inline void LookupResponse::set_pack_router_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_router_resp_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.pack_router_resp_time)
}

// uint32 number_of_lookup_servers = 12;
inline void LookupResponse::clear_number_of_lookup_servers() {
  number_of_lookup_servers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LookupResponse::_internal_number_of_lookup_servers() const {
  return number_of_lookup_servers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LookupResponse::number_of_lookup_servers() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.number_of_lookup_servers)
  return _internal_number_of_lookup_servers();
}
inline void LookupResponse::_internal_set_number_of_lookup_servers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  number_of_lookup_servers_ = value;
}
inline void LookupResponse::set_number_of_lookup_servers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_lookup_servers(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.number_of_lookup_servers)
}

// .router.UtilResponse util_response = 13;
inline bool LookupResponse::_internal_has_util_response() const {
  return this != internal_default_instance() && util_response_ != nullptr;
}
inline bool LookupResponse::has_util_response() const {
  return _internal_has_util_response();
}
inline void LookupResponse::clear_util_response() {
  if (GetArena() == nullptr && util_response_ != nullptr) {
    delete util_response_;
  }
  util_response_ = nullptr;
}
inline const ::router::UtilResponse& LookupResponse::_internal_util_response() const {
  const ::router::UtilResponse* p = util_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::router::UtilResponse&>(
      ::router::_UtilResponse_default_instance_);
}
inline const ::router::UtilResponse& LookupResponse::util_response() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.util_response)
  return _internal_util_response();
}
inline void LookupResponse::unsafe_arena_set_allocated_util_response(
    ::router::UtilResponse* util_response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(util_response_);
  }
  util_response_ = util_response;
  if (util_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router.LookupResponse.util_response)
}
inline ::router::UtilResponse* LookupResponse::release_util_response() {
  
  ::router::UtilResponse* temp = util_response_;
  util_response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::router::UtilResponse* LookupResponse::unsafe_arena_release_util_response() {
  // @@protoc_insertion_point(field_release:router.LookupResponse.util_response)
  
  ::router::UtilResponse* temp = util_response_;
  util_response_ = nullptr;
  return temp;
}
inline ::router::UtilResponse* LookupResponse::_internal_mutable_util_response() {
  
  if (util_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::router::UtilResponse>(GetArena());
    util_response_ = p;
  }
  return util_response_;
}
inline ::router::UtilResponse* LookupResponse::mutable_util_response() {
  // @@protoc_insertion_point(field_mutable:router.LookupResponse.util_response)
  return _internal_mutable_util_response();
}
inline void LookupResponse::set_allocated_util_response(::router::UtilResponse* util_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete util_response_;
  }
  if (util_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(util_response);
    if (message_arena != submessage_arena) {
      util_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, util_response, submessage_arena);
    }
    
  } else {
    
  }
  util_response_ = util_response;
  // @@protoc_insertion_point(field_set_allocated:router.LookupResponse.util_response)
}

// uint64 resp_time = 14;
inline void LookupResponse::clear_resp_time() {
  resp_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_resp_time() const {
  return resp_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::resp_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.resp_time)
  return _internal_resp_time();
}
inline void LookupResponse::_internal_set_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  resp_time_ = value;
}
inline void LookupResponse::set_resp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_resp_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.resp_time)
}

// uint64 router_time = 15;
inline void LookupResponse::clear_router_time() {
  router_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_router_time() const {
  return router_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::router_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.router_time)
  return _internal_router_time();
}
inline void LookupResponse::_internal_set_router_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  router_time_ = value;
}
inline void LookupResponse::set_router_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_router_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.router_time)
}

// uint64 start_stamp = 16;
inline void LookupResponse::clear_start_stamp() {
  start_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_start_stamp() const {
  return start_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::start_stamp() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.start_stamp)
  return _internal_start_stamp();
}
inline void LookupResponse::_internal_set_start_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_stamp_ = value;
}
inline void LookupResponse::set_start_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_stamp(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.start_stamp)
}

// uint64 end_stamp = 17;
inline void LookupResponse::clear_end_stamp() {
  end_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_end_stamp() const {
  return end_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::end_stamp() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.end_stamp)
  return _internal_end_stamp();
}
inline void LookupResponse::_internal_set_end_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_stamp_ = value;
}
inline void LookupResponse::set_end_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_stamp(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.end_stamp)
}

// uint64 request_id = 18;
inline void LookupResponse::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::request_id() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.request_id)
  return _internal_request_id();
}
inline void LookupResponse::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void LookupResponse::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.request_id)
}

// uint64 num_inline = 19;
inline void LookupResponse::clear_num_inline() {
  num_inline_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_num_inline() const {
  return num_inline_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::num_inline() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.num_inline)
  return _internal_num_inline();
}
inline void LookupResponse::_internal_set_num_inline(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_inline_ = value;
}
inline void LookupResponse::set_num_inline(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_inline(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.num_inline)
}

// uint64 num_workers = 20;
inline void LookupResponse::clear_num_workers() {
  num_workers_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_num_workers() const {
  return num_workers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::num_workers() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.num_workers)
  return _internal_num_workers();
}
inline void LookupResponse::_internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_workers_ = value;
}
inline void LookupResponse::set_num_workers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_workers(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.num_workers)
}

// uint64 num_resp = 21;
inline void LookupResponse::clear_num_resp() {
  num_resp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_num_resp() const {
  return num_resp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::num_resp() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.num_resp)
  return _internal_num_resp();
}
inline void LookupResponse::_internal_set_num_resp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_resp_ = value;
}
inline void LookupResponse::set_num_resp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_resp(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.num_resp)
}

// bool kill_ack = 22;
inline void LookupResponse::clear_kill_ack() {
  kill_ack_ = false;
}
inline bool LookupResponse::_internal_kill_ack() const {
  return kill_ack_;
}
inline bool LookupResponse::kill_ack() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.kill_ack)
  return _internal_kill_ack();
}
inline void LookupResponse::_internal_set_kill_ack(bool value) {
  
  kill_ack_ = value;
}
inline void LookupResponse::set_kill_ack(bool value) {
  _internal_set_kill_ack(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.kill_ack)
}

// string value = 23;
inline void LookupResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& LookupResponse::value() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.value)
  return _internal_value();
}
inline void LookupResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.value)
}
inline std::string* LookupResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:router.LookupResponse.value)
  return _internal_mutable_value();
}
inline const std::string& LookupResponse::_internal_value() const {
  return value_.Get();
}
inline void LookupResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LookupResponse::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:router.LookupResponse.value)
}
inline void LookupResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:router.LookupResponse.value)
}
inline void LookupResponse::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:router.LookupResponse.value)
}
inline std::string* LookupResponse::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LookupResponse::release_value() {
  // @@protoc_insertion_point(field_release:router.LookupResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LookupResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:router.LookupResponse.value)
}

// uint64 merge_time = 24;
inline void LookupResponse::clear_merge_time() {
  merge_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::_internal_merge_time() const {
  return merge_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LookupResponse::merge_time() const {
  // @@protoc_insertion_point(field_get:router.LookupResponse.merge_time)
  return _internal_merge_time();
}
inline void LookupResponse::_internal_set_merge_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  merge_time_ = value;
}
inline void LookupResponse::set_merge_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_merge_time(value);
  // @@protoc_insertion_point(field_set:router.LookupResponse.merge_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace router

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2eproto
