// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#include "router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace router {
constexpr UtilRequest::UtilRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : util_request_(false){}
struct UtilRequestDefaultTypeInternal {
  constexpr UtilRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtilRequestDefaultTypeInternal() {}
  union {
    UtilRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtilRequestDefaultTypeInternal _UtilRequest_default_instance_;
constexpr RouterRequest::RouterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , util_request_(nullptr)
  , operation_(0u)
  , last_request_(false)
  , kill_(false)
  , resp_time_(PROTOBUF_ULONGLONG(0))
  , request_id_(PROTOBUF_ULONGLONG(0))
  , load_(0u){}
struct RouterRequestDefaultTypeInternal {
  constexpr RouterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouterRequestDefaultTypeInternal() {}
  union {
    RouterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouterRequestDefaultTypeInternal _RouterRequest_default_instance_;
constexpr Util::Util(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_time_(PROTOBUF_ULONGLONG(0))
  , system_time_(PROTOBUF_ULONGLONG(0))
  , io_time_(PROTOBUF_ULONGLONG(0))
  , idle_time_(PROTOBUF_ULONGLONG(0)){}
struct UtilDefaultTypeInternal {
  constexpr UtilDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtilDefaultTypeInternal() {}
  union {
    Util _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtilDefaultTypeInternal _Util_default_instance_;
constexpr UtilResponse::UtilResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lookup_srv_util_()
  , router_util_(nullptr)
  , util_present_(false){}
struct UtilResponseDefaultTypeInternal {
  constexpr UtilResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UtilResponseDefaultTypeInternal() {}
  union {
    UtilResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UtilResponseDefaultTypeInternal _UtilResponse_default_instance_;
constexpr LookupResponse::LookupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , util_response_(nullptr)
  , create_router_req_time_(PROTOBUF_ULONGLONG(0))
  , unpack_router_req_time_(PROTOBUF_ULONGLONG(0))
  , update_router_util_time_(PROTOBUF_ULONGLONG(0))
  , get_lookup_srv_responses_time_(PROTOBUF_ULONGLONG(0))
  , create_lookup_srv_req_time_(PROTOBUF_ULONGLONG(0))
  , unpack_lookup_srv_resp_time_(PROTOBUF_ULONGLONG(0))
  , unpack_lookup_srv_req_time_(PROTOBUF_ULONGLONG(0))
  , lookup_srv_time_(PROTOBUF_ULONGLONG(0))
  , pack_lookup_srv_resp_time_(PROTOBUF_ULONGLONG(0))
  , pack_router_resp_time_(PROTOBUF_ULONGLONG(0))
  , resp_time_(PROTOBUF_ULONGLONG(0))
  , router_time_(PROTOBUF_ULONGLONG(0))
  , start_stamp_(PROTOBUF_ULONGLONG(0))
  , end_stamp_(PROTOBUF_ULONGLONG(0))
  , number_of_lookup_servers_(0u)
  , kill_ack_(false)
  , request_id_(PROTOBUF_ULONGLONG(0))
  , num_inline_(PROTOBUF_ULONGLONG(0))
  , num_workers_(PROTOBUF_ULONGLONG(0))
  , num_resp_(PROTOBUF_ULONGLONG(0))
  , merge_time_(PROTOBUF_ULONGLONG(0)){}
struct LookupResponseDefaultTypeInternal {
  constexpr LookupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LookupResponseDefaultTypeInternal() {}
  union {
    LookupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LookupResponseDefaultTypeInternal _LookupResponse_default_instance_;
}  // namespace router
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_router_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_router_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_router_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_router_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router::UtilRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::router::UtilRequest, util_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, key_),
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, value_),
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, operation_),
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, util_request_),
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, last_request_),
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, resp_time_),
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, kill_),
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::router::RouterRequest, load_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router::Util, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::router::Util, user_time_),
  PROTOBUF_FIELD_OFFSET(::router::Util, system_time_),
  PROTOBUF_FIELD_OFFSET(::router::Util, io_time_),
  PROTOBUF_FIELD_OFFSET(::router::Util, idle_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router::UtilResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::router::UtilResponse, util_present_),
  PROTOBUF_FIELD_OFFSET(::router::UtilResponse, lookup_srv_util_),
  PROTOBUF_FIELD_OFFSET(::router::UtilResponse, router_util_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, create_router_req_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, unpack_router_req_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, update_router_util_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, get_lookup_srv_responses_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, create_lookup_srv_req_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, unpack_lookup_srv_resp_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, unpack_lookup_srv_req_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, lookup_srv_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, pack_lookup_srv_resp_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, pack_router_resp_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, number_of_lookup_servers_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, util_response_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, resp_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, router_time_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, start_stamp_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, end_stamp_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, num_inline_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, num_workers_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, num_resp_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, kill_ack_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, value_),
  PROTOBUF_FIELD_OFFSET(::router::LookupResponse, merge_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::router::UtilRequest)},
  { 6, -1, sizeof(::router::RouterRequest)},
  { 20, -1, sizeof(::router::Util)},
  { 29, -1, sizeof(::router::UtilResponse)},
  { 37, -1, sizeof(::router::LookupResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_UtilRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_RouterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_Util_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_UtilResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::router::_LookupResponse_default_instance_),
};

const char descriptor_table_protodef_router_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014router.proto\022\006router\032 google/protobuf/"
  "descriptor.proto\"#\n\013UtilRequest\022\024\n\014util_"
  "request\030\001 \001(\010\"\302\001\n\rRouterRequest\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t\022\021\n\toperation\030\003 \001(\r\022)"
  "\n\014util_request\030\004 \001(\0132\023.router.UtilReques"
  "t\022\024\n\014last_request\030\005 \001(\010\022\021\n\tresp_time\030\006 \001"
  "(\004\022\014\n\004kill\030\007 \001(\010\022\022\n\nrequest_id\030\010 \001(\004\022\014\n\004"
  "load\030\t \001(\r\"R\n\004Util\022\021\n\tuser_time\030\001 \001(\004\022\023\n"
  "\013system_time\030\002 \001(\004\022\017\n\007io_time\030\003 \001(\004\022\021\n\ti"
  "dle_time\030\004 \001(\004\"n\n\014UtilResponse\022\024\n\014util_p"
  "resent\030\001 \001(\010\022%\n\017lookup_srv_util\030\002 \003(\0132\014."
  "router.Util\022!\n\013router_util\030\003 \001(\0132\014.route"
  "r.Util\"\203\005\n\016LookupResponse\022\036\n\026create_rout"
  "er_req_time\030\001 \001(\004\022\036\n\026unpack_router_req_t"
  "ime\030\002 \001(\004\022\037\n\027update_router_util_time\030\003 \001"
  "(\004\022%\n\035get_lookup_srv_responses_time\030\005 \001("
  "\004\022\"\n\032create_lookup_srv_req_time\030\006 \001(\004\022#\n"
  "\033unpack_lookup_srv_resp_time\030\007 \001(\004\022\"\n\032un"
  "pack_lookup_srv_req_time\030\010 \001(\004\022\027\n\017lookup"
  "_srv_time\030\t \001(\004\022!\n\031pack_lookup_srv_resp_"
  "time\030\n \001(\004\022\035\n\025pack_router_resp_time\030\013 \001("
  "\004\022 \n\030number_of_lookup_servers\030\014 \001(\r\022+\n\ru"
  "til_response\030\r \001(\0132\024.router.UtilResponse"
  "\022\021\n\tresp_time\030\016 \001(\004\022\023\n\013router_time\030\017 \001(\004"
  "\022\023\n\013start_stamp\030\020 \001(\004\022\021\n\tend_stamp\030\021 \001(\004"
  "\022\022\n\nrequest_id\030\022 \001(\004\022\022\n\nnum_inline\030\023 \001(\004"
  "\022\023\n\013num_workers\030\024 \001(\004\022\020\n\010num_resp\030\025 \001(\004\022"
  "\020\n\010kill_ack\030\026 \001(\010\022\r\n\005value\030\027 \001(\t\022\022\n\nmerg"
  "e_time\030\030 \001(\0042J\n\rRouterService\0229\n\006Router\022"
  "\025.router.RouterRequest\032\026.router.LookupRe"
  "sponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_router_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_router_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto = {
  false, false, 1216, descriptor_table_protodef_router_2eproto, "router.proto", 
  &descriptor_table_router_2eproto_once, descriptor_table_router_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_router_2eproto::offsets,
  file_level_metadata_router_2eproto, file_level_enum_descriptors_router_2eproto, file_level_service_descriptors_router_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_router_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return descriptor_table_router_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_router_2eproto(&descriptor_table_router_2eproto);
namespace router {

// ===================================================================

class UtilRequest::_Internal {
 public:
};

UtilRequest::UtilRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:router.UtilRequest)
}
UtilRequest::UtilRequest(const UtilRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  util_request_ = from.util_request_;
  // @@protoc_insertion_point(copy_constructor:router.UtilRequest)
}

void UtilRequest::SharedCtor() {
util_request_ = false;
}

UtilRequest::~UtilRequest() {
  // @@protoc_insertion_point(destructor:router.UtilRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UtilRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UtilRequest::ArenaDtor(void* object) {
  UtilRequest* _this = reinterpret_cast< UtilRequest* >(object);
  (void)_this;
}
void UtilRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtilRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtilRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:router.UtilRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  util_request_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtilRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool util_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          util_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtilRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.UtilRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool util_request = 1;
  if (this->util_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_util_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.UtilRequest)
  return target;
}

size_t UtilRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.UtilRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool util_request = 1;
  if (this->util_request() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtilRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UtilRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.UtilRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.UtilRequest)
    MergeFrom(*source);
  }
}

void UtilRequest::MergeFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.util_request() != 0) {
    _internal_set_util_request(from._internal_util_request());
  }
}

void UtilRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilRequest::CopyFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilRequest::IsInitialized() const {
  return true;
}

void UtilRequest::InternalSwap(UtilRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(util_request_, other->util_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UtilRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RouterRequest::_Internal {
 public:
  static const ::router::UtilRequest& util_request(const RouterRequest* msg);
};

const ::router::UtilRequest&
RouterRequest::_Internal::util_request(const RouterRequest* msg) {
  return *msg->util_request_;
}
RouterRequest::RouterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:router.RouterRequest)
}
RouterRequest::RouterRequest(const RouterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  if (from._internal_has_util_request()) {
    util_request_ = new ::router::UtilRequest(*from.util_request_);
  } else {
    util_request_ = nullptr;
  }
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&load_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(load_));
  // @@protoc_insertion_point(copy_constructor:router.RouterRequest)
}

void RouterRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&util_request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&load_) -
    reinterpret_cast<char*>(&util_request_)) + sizeof(load_));
}

RouterRequest::~RouterRequest() {
  // @@protoc_insertion_point(destructor:router.RouterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete util_request_;
}

void RouterRequest::ArenaDtor(void* object) {
  RouterRequest* _this = reinterpret_cast< RouterRequest* >(object);
  (void)_this;
}
void RouterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:router.RouterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArena() == nullptr && util_request_ != nullptr) {
    delete util_request_;
  }
  util_request_ = nullptr;
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(load_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "router.RouterRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "router.RouterRequest.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 operation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .router.UtilRequest util_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_util_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool last_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 resp_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          resp_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool kill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 request_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 load = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          load_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.RouterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "router.RouterRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "router.RouterRequest.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // uint32 operation = 3;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_operation(), target);
  }

  // .router.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::util_request(this), target, stream);
  }

  // bool last_request = 5;
  if (this->last_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_last_request(), target);
  }

  // uint64 resp_time = 6;
  if (this->resp_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_resp_time(), target);
  }

  // bool kill = 7;
  if (this->kill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_kill(), target);
  }

  // uint64 request_id = 8;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_request_id(), target);
  }

  // uint32 load = 9;
  if (this->load() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_load(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.RouterRequest)
  return target;
}

size_t RouterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.RouterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .router.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *util_request_);
  }

  // uint32 operation = 3;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operation());
  }

  // bool last_request = 5;
  if (this->last_request() != 0) {
    total_size += 1 + 1;
  }

  // bool kill = 7;
  if (this->kill() != 0) {
    total_size += 1 + 1;
  }

  // uint64 resp_time = 6;
  if (this->resp_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_resp_time());
  }

  // uint64 request_id = 8;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_id());
  }

  // uint32 load = 9;
  if (this->load() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_load());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.RouterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RouterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.RouterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.RouterRequest)
    MergeFrom(*source);
  }
}

void RouterRequest::MergeFrom(const RouterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.RouterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_util_request()) {
    _internal_mutable_util_request()->::router::UtilRequest::MergeFrom(from._internal_util_request());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from.last_request() != 0) {
    _internal_set_last_request(from._internal_last_request());
  }
  if (from.kill() != 0) {
    _internal_set_kill(from._internal_kill());
  }
  if (from.resp_time() != 0) {
    _internal_set_resp_time(from._internal_resp_time());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.load() != 0) {
    _internal_set_load(from._internal_load());
  }
}

void RouterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.RouterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterRequest::CopyFrom(const RouterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.RouterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterRequest::IsInitialized() const {
  return true;
}

void RouterRequest::InternalSwap(RouterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouterRequest, load_)
      + sizeof(RouterRequest::load_)
      - PROTOBUF_FIELD_OFFSET(RouterRequest, util_request_)>(
          reinterpret_cast<char*>(&util_request_),
          reinterpret_cast<char*>(&other->util_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Util::_Internal {
 public:
};

Util::Util(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:router.Util)
}
Util::Util(const Util& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_time_, &from.user_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&idle_time_) -
    reinterpret_cast<char*>(&user_time_)) + sizeof(idle_time_));
  // @@protoc_insertion_point(copy_constructor:router.Util)
}

void Util::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&idle_time_) -
    reinterpret_cast<char*>(&user_time_)) + sizeof(idle_time_));
}

Util::~Util() {
  // @@protoc_insertion_point(destructor:router.Util)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Util::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Util::ArenaDtor(void* object) {
  Util* _this = reinterpret_cast< Util* >(object);
  (void)_this;
}
void Util::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Util::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Util::Clear() {
// @@protoc_insertion_point(message_clear_start:router.Util)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idle_time_) -
      reinterpret_cast<char*>(&user_time_)) + sizeof(idle_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Util::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 system_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          system_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 io_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          io_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 idle_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Util::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.Util)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_time = 1;
  if (this->user_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_time(), target);
  }

  // uint64 system_time = 2;
  if (this->system_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_system_time(), target);
  }

  // uint64 io_time = 3;
  if (this->io_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_io_time(), target);
  }

  // uint64 idle_time = 4;
  if (this->idle_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_idle_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.Util)
  return target;
}

size_t Util::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.Util)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_time = 1;
  if (this->user_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_time());
  }

  // uint64 system_time = 2;
  if (this->system_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_system_time());
  }

  // uint64 io_time = 3;
  if (this->io_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_io_time());
  }

  // uint64 idle_time = 4;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idle_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Util::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.Util)
  GOOGLE_DCHECK_NE(&from, this);
  const Util* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Util>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.Util)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.Util)
    MergeFrom(*source);
  }
}

void Util::MergeFrom(const Util& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.Util)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_time() != 0) {
    _internal_set_user_time(from._internal_user_time());
  }
  if (from.system_time() != 0) {
    _internal_set_system_time(from._internal_system_time());
  }
  if (from.io_time() != 0) {
    _internal_set_io_time(from._internal_io_time());
  }
  if (from.idle_time() != 0) {
    _internal_set_idle_time(from._internal_idle_time());
  }
}

void Util::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.Util)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Util::CopyFrom(const Util& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.Util)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Util::IsInitialized() const {
  return true;
}

void Util::InternalSwap(Util* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Util, idle_time_)
      + sizeof(Util::idle_time_)
      - PROTOBUF_FIELD_OFFSET(Util, user_time_)>(
          reinterpret_cast<char*>(&user_time_),
          reinterpret_cast<char*>(&other->user_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Util::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UtilResponse::_Internal {
 public:
  static const ::router::Util& router_util(const UtilResponse* msg);
};

const ::router::Util&
UtilResponse::_Internal::router_util(const UtilResponse* msg) {
  return *msg->router_util_;
}
UtilResponse::UtilResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lookup_srv_util_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:router.UtilResponse)
}
UtilResponse::UtilResponse(const UtilResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lookup_srv_util_(from.lookup_srv_util_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_router_util()) {
    router_util_ = new ::router::Util(*from.router_util_);
  } else {
    router_util_ = nullptr;
  }
  util_present_ = from.util_present_;
  // @@protoc_insertion_point(copy_constructor:router.UtilResponse)
}

void UtilResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&router_util_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&router_util_)) + sizeof(util_present_));
}

UtilResponse::~UtilResponse() {
  // @@protoc_insertion_point(destructor:router.UtilResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UtilResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete router_util_;
}

void UtilResponse::ArenaDtor(void* object) {
  UtilResponse* _this = reinterpret_cast< UtilResponse* >(object);
  (void)_this;
}
void UtilResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UtilResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UtilResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:router.UtilResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lookup_srv_util_.Clear();
  if (GetArena() == nullptr && router_util_ != nullptr) {
    delete router_util_;
  }
  router_util_ = nullptr;
  util_present_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UtilResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool util_present = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          util_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .router.Util lookup_srv_util = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lookup_srv_util(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .router.Util router_util = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router_util(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtilResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.UtilResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool util_present = 1;
  if (this->util_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_util_present(), target);
  }

  // repeated .router.Util lookup_srv_util = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lookup_srv_util_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lookup_srv_util(i), target, stream);
  }

  // .router.Util router_util = 3;
  if (this->has_router_util()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::router_util(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.UtilResponse)
  return target;
}

size_t UtilResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.UtilResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .router.Util lookup_srv_util = 2;
  total_size += 1UL * this->_internal_lookup_srv_util_size();
  for (const auto& msg : this->lookup_srv_util_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .router.Util router_util = 3;
  if (this->has_router_util()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_util_);
  }

  // bool util_present = 1;
  if (this->util_present() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtilResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UtilResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.UtilResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.UtilResponse)
    MergeFrom(*source);
  }
}

void UtilResponse::MergeFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lookup_srv_util_.MergeFrom(from.lookup_srv_util_);
  if (from.has_router_util()) {
    _internal_mutable_router_util()->::router::Util::MergeFrom(from._internal_router_util());
  }
  if (from.util_present() != 0) {
    _internal_set_util_present(from._internal_util_present());
  }
}

void UtilResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilResponse::CopyFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilResponse::IsInitialized() const {
  return true;
}

void UtilResponse::InternalSwap(UtilResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lookup_srv_util_.InternalSwap(&other->lookup_srv_util_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UtilResponse, util_present_)
      + sizeof(UtilResponse::util_present_)
      - PROTOBUF_FIELD_OFFSET(UtilResponse, router_util_)>(
          reinterpret_cast<char*>(&router_util_),
          reinterpret_cast<char*>(&other->router_util_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UtilResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LookupResponse::_Internal {
 public:
  static const ::router::UtilResponse& util_response(const LookupResponse* msg);
};

const ::router::UtilResponse&
LookupResponse::_Internal::util_response(const LookupResponse* msg) {
  return *msg->util_response_;
}
LookupResponse::LookupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:router.LookupResponse)
}
LookupResponse::LookupResponse(const LookupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  if (from._internal_has_util_response()) {
    util_response_ = new ::router::UtilResponse(*from.util_response_);
  } else {
    util_response_ = nullptr;
  }
  ::memcpy(&create_router_req_time_, &from.create_router_req_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&merge_time_) -
    reinterpret_cast<char*>(&create_router_req_time_)) + sizeof(merge_time_));
  // @@protoc_insertion_point(copy_constructor:router.LookupResponse)
}

void LookupResponse::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&util_response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&merge_time_) -
    reinterpret_cast<char*>(&util_response_)) + sizeof(merge_time_));
}

LookupResponse::~LookupResponse() {
  // @@protoc_insertion_point(destructor:router.LookupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LookupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete util_response_;
}

void LookupResponse::ArenaDtor(void* object) {
  LookupResponse* _this = reinterpret_cast< LookupResponse* >(object);
  (void)_this;
}
void LookupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LookupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LookupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:router.LookupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArena() == nullptr && util_response_ != nullptr) {
    delete util_response_;
  }
  util_response_ = nullptr;
  ::memset(&create_router_req_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&merge_time_) -
      reinterpret_cast<char*>(&create_router_req_time_)) + sizeof(merge_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LookupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 create_router_req_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          create_router_req_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 unpack_router_req_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unpack_router_req_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 update_router_util_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_router_util_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 get_lookup_srv_responses_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          get_lookup_srv_responses_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 create_lookup_srv_req_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          create_lookup_srv_req_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 unpack_lookup_srv_resp_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          unpack_lookup_srv_resp_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 unpack_lookup_srv_req_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          unpack_lookup_srv_req_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lookup_srv_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          lookup_srv_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pack_lookup_srv_resp_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pack_lookup_srv_resp_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pack_router_resp_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          pack_router_resp_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_lookup_servers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          number_of_lookup_servers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .router.UtilResponse util_response = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_util_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 resp_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          resp_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 router_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          router_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_stamp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          start_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_stamp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          end_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 request_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_inline = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          num_inline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_workers = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          num_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_resp = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          num_resp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool kill_ack = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          kill_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "router.LookupResponse.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 merge_time = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          merge_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LookupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router.LookupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 create_router_req_time = 1;
  if (this->create_router_req_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_create_router_req_time(), target);
  }

  // uint64 unpack_router_req_time = 2;
  if (this->unpack_router_req_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_unpack_router_req_time(), target);
  }

  // uint64 update_router_util_time = 3;
  if (this->update_router_util_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_update_router_util_time(), target);
  }

  // uint64 get_lookup_srv_responses_time = 5;
  if (this->get_lookup_srv_responses_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_get_lookup_srv_responses_time(), target);
  }

  // uint64 create_lookup_srv_req_time = 6;
  if (this->create_lookup_srv_req_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_create_lookup_srv_req_time(), target);
  }

  // uint64 unpack_lookup_srv_resp_time = 7;
  if (this->unpack_lookup_srv_resp_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_unpack_lookup_srv_resp_time(), target);
  }

  // uint64 unpack_lookup_srv_req_time = 8;
  if (this->unpack_lookup_srv_req_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_unpack_lookup_srv_req_time(), target);
  }

  // uint64 lookup_srv_time = 9;
  if (this->lookup_srv_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_lookup_srv_time(), target);
  }

  // uint64 pack_lookup_srv_resp_time = 10;
  if (this->pack_lookup_srv_resp_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_pack_lookup_srv_resp_time(), target);
  }

  // uint64 pack_router_resp_time = 11;
  if (this->pack_router_resp_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_pack_router_resp_time(), target);
  }

  // uint32 number_of_lookup_servers = 12;
  if (this->number_of_lookup_servers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_number_of_lookup_servers(), target);
  }

  // .router.UtilResponse util_response = 13;
  if (this->has_util_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::util_response(this), target, stream);
  }

  // uint64 resp_time = 14;
  if (this->resp_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_resp_time(), target);
  }

  // uint64 router_time = 15;
  if (this->router_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_router_time(), target);
  }

  // uint64 start_stamp = 16;
  if (this->start_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_start_stamp(), target);
  }

  // uint64 end_stamp = 17;
  if (this->end_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_end_stamp(), target);
  }

  // uint64 request_id = 18;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_request_id(), target);
  }

  // uint64 num_inline = 19;
  if (this->num_inline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_num_inline(), target);
  }

  // uint64 num_workers = 20;
  if (this->num_workers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_num_workers(), target);
  }

  // uint64 num_resp = 21;
  if (this->num_resp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_num_resp(), target);
  }

  // bool kill_ack = 22;
  if (this->kill_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_kill_ack(), target);
  }

  // string value = 23;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "router.LookupResponse.value");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_value(), target);
  }

  // uint64 merge_time = 24;
  if (this->merge_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(24, this->_internal_merge_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router.LookupResponse)
  return target;
}

size_t LookupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router.LookupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 23;
  if (this->value().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .router.UtilResponse util_response = 13;
  if (this->has_util_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *util_response_);
  }

  // uint64 create_router_req_time = 1;
  if (this->create_router_req_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_create_router_req_time());
  }

  // uint64 unpack_router_req_time = 2;
  if (this->unpack_router_req_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unpack_router_req_time());
  }

  // uint64 update_router_util_time = 3;
  if (this->update_router_util_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_update_router_util_time());
  }

  // uint64 get_lookup_srv_responses_time = 5;
  if (this->get_lookup_srv_responses_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_get_lookup_srv_responses_time());
  }

  // uint64 create_lookup_srv_req_time = 6;
  if (this->create_lookup_srv_req_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_create_lookup_srv_req_time());
  }

  // uint64 unpack_lookup_srv_resp_time = 7;
  if (this->unpack_lookup_srv_resp_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unpack_lookup_srv_resp_time());
  }

  // uint64 unpack_lookup_srv_req_time = 8;
  if (this->unpack_lookup_srv_req_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unpack_lookup_srv_req_time());
  }

  // uint64 lookup_srv_time = 9;
  if (this->lookup_srv_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lookup_srv_time());
  }

  // uint64 pack_lookup_srv_resp_time = 10;
  if (this->pack_lookup_srv_resp_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_lookup_srv_resp_time());
  }

  // uint64 pack_router_resp_time = 11;
  if (this->pack_router_resp_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_router_resp_time());
  }

  // uint64 resp_time = 14;
  if (this->resp_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_resp_time());
  }

  // uint64 router_time = 15;
  if (this->router_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_router_time());
  }

  // uint64 start_stamp = 16;
  if (this->start_stamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_stamp());
  }

  // uint64 end_stamp = 17;
  if (this->end_stamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_stamp());
  }

  // uint32 number_of_lookup_servers = 12;
  if (this->number_of_lookup_servers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_lookup_servers());
  }

  // bool kill_ack = 22;
  if (this->kill_ack() != 0) {
    total_size += 2 + 1;
  }

  // uint64 request_id = 18;
  if (this->request_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_id());
  }

  // uint64 num_inline = 19;
  if (this->num_inline() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_inline());
  }

  // uint64 num_workers = 20;
  if (this->num_workers() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_workers());
  }

  // uint64 num_resp = 21;
  if (this->num_resp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_resp());
  }

  // uint64 merge_time = 24;
  if (this->merge_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_merge_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LookupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:router.LookupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LookupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LookupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:router.LookupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:router.LookupResponse)
    MergeFrom(*source);
  }
}

void LookupResponse::MergeFrom(const LookupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:router.LookupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_util_response()) {
    _internal_mutable_util_response()->::router::UtilResponse::MergeFrom(from._internal_util_response());
  }
  if (from.create_router_req_time() != 0) {
    _internal_set_create_router_req_time(from._internal_create_router_req_time());
  }
  if (from.unpack_router_req_time() != 0) {
    _internal_set_unpack_router_req_time(from._internal_unpack_router_req_time());
  }
  if (from.update_router_util_time() != 0) {
    _internal_set_update_router_util_time(from._internal_update_router_util_time());
  }
  if (from.get_lookup_srv_responses_time() != 0) {
    _internal_set_get_lookup_srv_responses_time(from._internal_get_lookup_srv_responses_time());
  }
  if (from.create_lookup_srv_req_time() != 0) {
    _internal_set_create_lookup_srv_req_time(from._internal_create_lookup_srv_req_time());
  }
  if (from.unpack_lookup_srv_resp_time() != 0) {
    _internal_set_unpack_lookup_srv_resp_time(from._internal_unpack_lookup_srv_resp_time());
  }
  if (from.unpack_lookup_srv_req_time() != 0) {
    _internal_set_unpack_lookup_srv_req_time(from._internal_unpack_lookup_srv_req_time());
  }
  if (from.lookup_srv_time() != 0) {
    _internal_set_lookup_srv_time(from._internal_lookup_srv_time());
  }
  if (from.pack_lookup_srv_resp_time() != 0) {
    _internal_set_pack_lookup_srv_resp_time(from._internal_pack_lookup_srv_resp_time());
  }
  if (from.pack_router_resp_time() != 0) {
    _internal_set_pack_router_resp_time(from._internal_pack_router_resp_time());
  }
  if (from.resp_time() != 0) {
    _internal_set_resp_time(from._internal_resp_time());
  }
  if (from.router_time() != 0) {
    _internal_set_router_time(from._internal_router_time());
  }
  if (from.start_stamp() != 0) {
    _internal_set_start_stamp(from._internal_start_stamp());
  }
  if (from.end_stamp() != 0) {
    _internal_set_end_stamp(from._internal_end_stamp());
  }
  if (from.number_of_lookup_servers() != 0) {
    _internal_set_number_of_lookup_servers(from._internal_number_of_lookup_servers());
  }
  if (from.kill_ack() != 0) {
    _internal_set_kill_ack(from._internal_kill_ack());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.num_inline() != 0) {
    _internal_set_num_inline(from._internal_num_inline());
  }
  if (from.num_workers() != 0) {
    _internal_set_num_workers(from._internal_num_workers());
  }
  if (from.num_resp() != 0) {
    _internal_set_num_resp(from._internal_num_resp());
  }
  if (from.merge_time() != 0) {
    _internal_set_merge_time(from._internal_merge_time());
  }
}

void LookupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:router.LookupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupResponse::CopyFrom(const LookupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router.LookupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupResponse::IsInitialized() const {
  return true;
}

void LookupResponse::InternalSwap(LookupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LookupResponse, merge_time_)
      + sizeof(LookupResponse::merge_time_)
      - PROTOBUF_FIELD_OFFSET(LookupResponse, util_response_)>(
          reinterpret_cast<char*>(&util_response_),
          reinterpret_cast<char*>(&other->util_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LookupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace router
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::router::UtilRequest* Arena::CreateMaybeMessage< ::router::UtilRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::UtilRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::router::RouterRequest* Arena::CreateMaybeMessage< ::router::RouterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::RouterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::router::Util* Arena::CreateMaybeMessage< ::router::Util >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::Util >(arena);
}
template<> PROTOBUF_NOINLINE ::router::UtilResponse* Arena::CreateMaybeMessage< ::router::UtilResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::UtilResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::router::LookupResponse* Arena::CreateMaybeMessage< ::router::LookupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router::LookupResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
